#version 330 core

in vec3 Normal;
in vec3 FragPos;
in vec2 TC;

out vec4 FragColor;

struct Material{
       sampler2D diffuse;
       sampler2D specular;
       float shininess;
};
struct Light{
       vec3 position;
       vec3 direction;
       float cutoff;

       vec3 ambient;
       vec3 diffuse;
       vec3 specular;
       
       float constant;
       float linear;
       float quadratic;
};

uniform Material material;
uniform Light light;
uniform vec3 viewPos;

void main(){


float dist = length(light.position-FragPos);
float atten = 1.0f/(light.constant+light.linear * dist + light.quadratic * (dist * dist));

vec3 ambient = light.ambient * vec3(texture(material.diffuse, TC));

vec3 norm = normalize(Normal);
vec3 lightDir = normalize(light.position-FragPos);
float diff = max(dot(norm, lightDir), 0.0f);
vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TC));

vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightDir, norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
vec3 specular = light.specular * spec * vec3(texture(material.specular, TC));

vec3 result;
float theta =  dot(lightDir, normalize(-light.direction));
if(theta>light.cutoff){
result = (ambient + diffuse + specular) * atten;
} else {
result = light.ambient * vec3(texture(material.diffuse, TC));}

FragColor = vec4(result, 1.0f);
}

